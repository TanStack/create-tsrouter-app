import { createRouter as createTanstackRouter } from '@tanstack/react-router'<% if (addOnEnabled.sentry) { %>
import * as Sentry from '@sentry/react'
import * as SentryServer from '@sentry/node'
import { createIsomorphicFn } from '@tanstack/react-start'
<% } %><% if (addOnEnabled['tanstack-query']) { %>
import { routerWithQueryClient } from '@tanstack/react-router-with-query'
import * as TanstackQuery from './integrations/tanstack-query/root-provider'
<% } %>

// Import the generated route tree
import { routeTree } from './routeTree.gen'

import './styles.css'

// Create a new router instance
export const createRouter = () => {
  <% if (addOnEnabled['tanstack-query']) { %>
  const router = routerWithQueryClient(createTanstackRouter({
    routeTree,
    context: {
      <% if (addOnEnabled['tanstack-query']) { %>
        ...TanstackQuery.getContext(),
      <% } %>
    },
    scrollRestoration: true,
  }), TanstackQuery.getContext().queryClient)
  <% } else { %>
  const router = createTanstackRouter({
    routeTree,
    scrollRestoration: true,
  })
  <% } %>
  return router
}

<% if (addOnEnabled.sentry) { %>
  const router = createRouter()
  createIsomorphicFn().server(() => {
    SentryServer.init({
      dsn: import.meta.env.VITE_SENTRY_DSN,
      tracesSampleRate: 1.0,
      profilesSampleRate: 1.0,
    })
  }).client(() => {
    Sentry.init({
      dsn: import.meta.env.VITE_SENTRY_DSN,
      integrations: [
        Sentry.replayIntegration({
          maskAllText: false,
          blockAllMedia: false,
        }),
        Sentry.tanstackRouterBrowserTracingIntegration(router),
      ],
      tracesSampleRate: 1.0,
      replaysSessionSampleRate: 1.0,
      replaysOnErrorSampleRate: 1.0,
    })
  })()
<% } %>

// Register the router instance for type safety
declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}
